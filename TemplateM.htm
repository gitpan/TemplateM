<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>TemplateM - Templates processing module</title>
<link rev="made" href="mailto:" />
</head>

<body style="background-color: white">

<p><a name="__index__"></a></p>
<!-- INDEX BEGIN -->

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#version">VERSION</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<ul>

		<li><a href="#object_$template_creation">Object $template creation</a></li>
		<li><a href="#update_object_$template">Update object $template</a></li>
		<li><a href="#modification_of_labels_(cgi_labels)">Modification of labels (cgi labels)</a></li>
		<li><a href="#block_labels_modification_(val_labels)">Block labels modification (val labels)</a></li>
		<li><a href="#cast_if_method">CAST_IF method</a></li>
		<li><a href="#block_finalizing">Block finalizing</a></li>
		<li><a href="#template_finalizing">Template finalizing</a></li>
	</ul>

	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#environment">ENVIRONMENT</a></li>
	<li><a href="#see_also">SEE ALSO</a></li>
	<li><a href="#diagnostics">DIAGNOSTICS</a></li>
	<li><a href="#history">HISTORY</a></li>
	<li><a href="#thanks">THANKS</a></li>
	<li><a href="#author">AUTHOR</a></li>
	<li><a href="#copyrights">COPYRIGHTS</a></li>
</ul>
<!-- INDEX END -->

<hr />
<p>
</p>
<h1><a name="name">NAME</a></h1>
<p>TemplateM - Templates processing module</p>
<p>
</p>
<hr />
<h1><a name="version">VERSION</a></h1>
<p>Version 2.01 
23.10.2006</p>
<p>
</p>
<hr />
<h1><a name="synopsis">SYNOPSIS</a></h1>
<pre>

unshift(@INC,module_directory_absolute_path);
require TemplateM;</pre>
<p>or:</p>
<p>use lib module_directory_absolute_path; # if the module is installed in user's directory
use TemplateM;</p>
<p>
</p>
<h2><a name="object_$template_creation">Object $template creation</a></h2>
<p>as list:</p>
<p>$template = new TemplateM(template_file,username,user_password, cache_files_absolute_path, timeout, http_header);</p>
<p>or as implicit hash array (every key of hash array must be forestall the ``-'' sign):</p>
<p>$template = new TemplateM(-file=&gt;'template_file',-user=&gt;'username',-password=&gt;'user_password',
            -cache=&gt;'cache_files_absolute_path', -timeout=&gt;'timeout', -header=&gt;'HTTP_header');</p>
<p>or as reference to hash array or as hash array:</p>
<p>$template = new TemplateM({file=&gt;'template_file',user=&gt;'username',password=&gt;'user_password',
            cache=&gt;'cache_files_absolute_path', timeout=&gt;'timeout', header=&gt;'HTTP_header'});</p>
<p>
</p>
<h2><a name="update_object_$template">Update object $template</a></h2>
<p>$template-&gt;update(template_file, username, user_password, cache_files_absolute_path, timeout, http_header);</p>
<p>Method ``update'' is used like ``new'' method, but ``new'' method is more prefer</p>
<dl>
<dt><strong><a name="item_template_file">template_file</a></strong><br />
</dt>
<dd>
<strong>template filename</strong>. The template file have to be located in CGI-script directory or one level up directory. 

</dd>
<dd>
<pre>

If the module can't able to obtain access to the file, the error message will be evoked.</pre>
</dd>
<p></p>
<dt><strong><a name="item_username">username</a></strong><br />
</dt>
<dd>
<strong>username</strong> of virtual client. The username have to be present in .htaccess file (or in other Apache's configuration file like .htaccess).

</dd>
<dd>
<pre>

Set username blank then you don't use HTTP-authorization via Apache.</pre>
</dd>
<p></p>
<dt><strong><a name="item_user_password">user_password</a></strong><br />
</dt>
<dd>
<strong>User password</strong> of virtual client. See <a href="#item_username">username</a>
</dd>
<p></p>
<dt><strong><a name="item_cache_files_absolute_path">cache_files_absolute_path</a></strong><br />
</dt>
<dd>
<strong>Absolute path</strong> to the cache directory. Cache will not be used when this parameter is not presented.
</dd>
<p></p>
<dt><strong><a name="item_timeout">timeout</a></strong><br />
</dt>
<dd>
<strong>Timeout</strong> is the period (in seconds) of template's updating delay. Default value is 1200 seconds.
</dd>
<dd>
<p>if updating delay parameter is ``-1'' the updating delay will be perpetual</p>
</dd>
<p></p>
<dt><strong><a name="item_http_header">HTTP_header</a></strong><br />
</dt>
<dd>
<strong>HTTP_header</strong> is used to send a raw HTTP header before template processing by html method
</dd>
<p></p></dl>
<p>
</p>
<h2><a name="modification_of_labels_(cgi_labels)">Modification of labels (cgi labels)</a></h2>
<p>$template-&gt;cast({label=&gt;value, label=&gt;value, ...=&gt;...});</p>
<p>or</p>
<p>$template-&gt;cast(label=&gt;value, label=&gt;value, ...=&gt;...);</p>
<dl>
<dt><strong><a name="item_label">label</a></strong><br />
</dt>
<dd>
<strong>Label</strong> - name will be replaced with appropriate <a href="#item_value">value</a> in tag &lt;!-- cgi: label --&gt;
</dd>
<p></p>
<dt><strong><a name="item_value">value</a></strong><br />
</dt>
<dd>
<strong>Value</strong> - Value, which CGI-script sets. Member of <a href="#item_label">label</a>
</dd>
<p></p></dl>
<p>
</p>
<h2><a name="block_labels_modification_(val_labels)">Block labels modification (val labels)</a></h2>
<p>$template-&gt;cast_loop (``block_name'', [{label=&gt;value, label=&gt;value, ...=&gt;...}]);</p>
<p>or</p>
<p>$template-&gt;cast_loop (``block_name'', {label=&gt;value, label=&gt;value, ...=&gt;...});</p>
<p>or</p>
<p>$template-&gt;cast_loop (``block_name'', %hash);</p>
<dl>
<dt><strong><a name="item_block_name">block_name</a></strong><br />
</dt>
<dd>
<strong>Block_name</strong> - Block identification name. The name will be inserted in tags &lt;!-- do: block_name --&gt; and &lt;!-- loop: block_name --&gt; - all content between this tags processes like labels, but the tag will be formed as &lt;!-- val: label --&gt;
</dd>
<p></p></dl>
<p>
</p>
<h2><a name="cast_if_method">CAST_IF method</a></h2>
<p>$template-&gt;cast_if('block_name', 'condition');</p>
<p>method prints blocks according to the condition.</p>
<p>if condition is true the if-block will be printed:</p>
<p>&lt;!-- if: name --&gt;
    block content if
&lt;!-- end_if: name --&gt;</p>
<p>and else-block not will be printed.</p>
<p>If the condition is false,  vice versa, else-block will be printed and if-block will be passed</p>
<p>In all of cases names of this blocks must bethe same!</p>
<p>
</p>
<h2><a name="block_finalizing">Block finalizing</a></h2>
<p>$template-&gt;finalize(block_name);
</p>
<pre>

Block finalizing uses for not-processed blocks deleting. You need use finalizing every time you use blockes.</pre>
<p>
</p>
<h2><a name="template_finalizing">Template finalizing</a></h2>
<p>print $template-&gt;html(-header=&gt;'HTTP_header') || 'Inner error!';</p>
<p>or</p>
<p>print $template-&gt;html({header=&gt;'HTTP_header'}) || 'Inner error!';</p>
<p>or</p>
<p>print $template-&gt;<code>html('HTTP_header')</code> || 'Inner error!';</p>
<p>The procedure will return formed document after template processing.
if header is present as argument it will be added at the beginning of template's return.</p>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p>The module can be used with SSI directives together, like in this shtml-sample:
</p>
<pre>

     &lt;html&gt;
       &lt;!--#include virtual=&quot;head.htm&quot;--&gt;
     &lt;body&gt;
      &lt;center&gt;&lt;!-- cgi: head --&gt;&lt;center&gt;
         &lt;!-- do: BLOCK_P --&gt;
          &lt;p&gt;&lt;!-- val: content --&gt;&lt;/p&gt;
         &lt;!-- loop: BLOCK_P --&gt;
     &lt;/body&gt;
     &lt;/html&gt;</pre>
<p>
</p>
<hr />
<h1><a name="environment">ENVIRONMENT</a></h1>
<p>No environment variables are used.</p>
<p>
</p>
<hr />
<h1><a name="see_also">SEE ALSO</a></h1>
<p>perl</p>
<p>
</p>
<hr />
<h1><a name="diagnostics">DIAGNOSTICS</a></h1>
<p>The usual warnings if it cannot read or write the files involved.</p>
<p>
</p>
<hr />
<h1><a name="history">HISTORY</a></h1>
<p>1.00 Initial release</p>
<p>1.10 Working with cache ability is added</p>
<p>1.11 Inner method's interface had structured</p>
<p>1.21 New time managment for templates caching. You can set how long
     template file will be cached before renew.</p>
<p>2.00 - Simultaneous templates using errors is eliminated.
     - Alternate interface of using methods is added.
     - Method of conditional representation of template CAST_IF is added.</p>

<p>2.01 Cache-file access errors corrected</p>


<p>
</p>
<hr />
<h1><a name="thanks">THANKS</a></h1>
<p>Thanks to Andrew Syrba for useful and valuable information.
Thanks to Dmitry Klimov for technical translating.</p>
<p>
</p>
<hr />
<h1><a name="author">AUTHOR</a></h1>
<p>Lepenkov Sergey (Serz Minus), <code>minus@mail333.com</code>

</p>
<p>
</p>
<hr />
<h1><a name="copyrights">COPYRIGHTS</a></h1>
<p>Copyright (C) 1998-2006 D&amp;D Corporation. All Rights Reserved

</p>

</body>

</html>
